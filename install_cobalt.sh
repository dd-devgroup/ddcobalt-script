#!/bin/bash

set -e

# –¶–≤–µ—Ç–∞ –∏ —ç–º–æ–¥–∑–∏
GREEN='\033[0;32m'
CYAN='\033[0;36m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
RESET='\033[0m'

INFO="‚ÑπÔ∏è "
OK="‚úÖ"
WARN="‚ö†Ô∏è "
ERR="‚ùå"
ASK="üîç"

COBALT_DIR="$HOME/cobalt"
COMPOSE_FILE="$COBALT_DIR/docker-compose.yml"
PORT="9000"
SCRIPT_URL="https://raw.githubusercontent.com/dd-devgroup/ddcobalt-script/main/install_cobalt.sh"
LOCAL_SCRIPT="$HOME/ddcobalt-install.sh"

if [[ ! -f "$LOCAL_SCRIPT" ]]; then
  echo -e "${WARN} ${YELLOW}–°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –Ω–µ –∏–∑ —Ñ–∞–π–ª–∞, —Å–æ—Ö—Ä–∞–Ω—è—é –≤ $LOCAL_SCRIPT –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é—Å—å...${RESET}"
  curl -fsSL "$SCRIPT_URL" -o "$LOCAL_SCRIPT"
  chmod +x "$LOCAL_SCRIPT"
  exec "$LOCAL_SCRIPT" "$@"
fi

if [ "$(id -u)" -ne 0 ]; then
  echo -e "${ERR} ${RED}–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å –ø—Ä–∞–≤–∞–º–∏ root (—á–µ—Ä–µ–∑ sudo)${RESET}"
  exit 1
fi

install_cobalt() {
  echo -e "${INFO} ${CYAN}–ü—Ä–æ–≤–µ—Ä–∫–∞ Docker...${RESET}"
  if ! command -v docker &> /dev/null; then
    echo -e "${WARN} ${YELLOW}Docker –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é Docker...${RESET}"
    apt update -y
    apt install -y ca-certificates curl gnupg lsb-release

    mkdir -p /etc/apt/keyrings
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg

    echo \
      "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
      $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null

    apt update -y
    apt install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

    echo -e "${OK} ${GREEN}Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.${RESET}"
  else
    echo -e "${OK} ${GREEN}Docker —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.${RESET}"
  fi

  if ! command -v docker-compose &> /dev/null; then
    echo -e "${WARN} ${YELLOW}docker-compose –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é...${RESET}"
    curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    chmod +x /usr/local/bin/docker-compose
    ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
    echo -e "${OK} ${GREEN}docker-compose —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.${RESET}"
  else
    echo -e "${OK} ${GREEN}docker-compose —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.${RESET}"
  fi

  echo -e "${INFO} ${CYAN}–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...${RESET}"
  apt update -y
  apt install -y docker-compose curl nscd certbot

  echo -e "${INFO} ${CYAN}–ó–∞–ø—É—Å–∫ nscd...${RESET}"
  systemctl enable nscd && systemctl start nscd

  echo -e "${ASK} ${YELLOW}–í–≤–µ–¥–∏—Ç–µ –≤–Ω–µ—à–Ω–∏–π API URL (–Ω–∞–ø—Ä–∏–º–µ—Ä, my.cobalt.instance):${RESET}"
  read -rp ">>> " API_URL

  DOMAIN=$(echo "$API_URL" | sed -E 's#https?://##' | sed 's#/.*##')

  echo -e "${INFO} ${CYAN}–ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ–º–µ–Ω –¥–ª—è certbot: $DOMAIN${RESET}"
  echo -e "${ASK} ${YELLOW}–ù—É–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å cookies.json? [y/N]:${RESET}"
  read -rp ">>> " USE_COOKIES
  USE_COOKIES=${USE_COOKIES,,}

  echo -e "${INFO} ${CYAN}–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ $COBALT_DIR...${RESET}"
  mkdir -p "$COBALT_DIR"
  cd "$COBALT_DIR"

  if [[ "$USE_COOKIES" == "y" ]]; then
    echo -e "${INFO} ${CYAN}–°–æ–∑–¥–∞–Ω–∏–µ –ø—É—Å—Ç–æ–≥–æ cookies.json...${RESET}"
    touch cookies.json
  fi

  echo -e "${INFO} ${CYAN}–°–æ–∑–¥–∞–Ω–∏–µ docker-compose.yml...${RESET}"

  cat > "$COMPOSE_FILE" <<EOF
version: '3.8'

networks:
  cobalt_net:
    name: cobalt_net
    driver: bridge

services:
  cobalt:
    image: ghcr.io/imputnet/cobalt:11
    init: true
    read_only: true
    restart: unless-stopped
    container_name: cobalt
    environment:
      API_URL: "$API_URL"
    networks:
      - cobalt_net
EOF

  if [[ "$USE_COOKIES" == "y" ]]; then
    echo '      COOKIE_PATH: "/cookies.json"' >> "$COMPOSE_FILE"
  fi

  cat >> "$COMPOSE_FILE" <<EOF

  nginx:
    image: nginx:stable
    container_name: cobalt-nginx
    restart: unless-stopped
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./nginx-temp.conf:/etc/nginx/conf.d/default.conf:ro
      - ./certs:/etc/ssl/certs
      - ./certs:/etc/letsencrypt/live/$DOMAIN
      - ./webroot:/var/www/certbot
    networks:
      - cobalt_net

  watchtower:
    image: ghcr.io/containrrr/watchtower
    restart: unless-stopped
    command: --cleanup --scope cobalt --interval 900 --include-restarting
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
EOF

  if [[ "$USE_COOKIES" == "y" ]]; then
    echo '      COOKIE_PATH: "/cookies.json"' >> "$COMPOSE_FILE"
    echo '    volumes:' >> "$COMPOSE_FILE"
    echo '      - ./cookies.json:/cookies.json' >> "$COMPOSE_FILE"
  fi

  echo -e "${INFO} ${CYAN}–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ nginx –±–µ–∑ SSL (./nginx-temp.conf)...${RESET}"
  cat > nginx-temp.conf <<EOF
server {
    listen 80;
    server_name $DOMAIN;

    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }

    location / {
        return 301 https://\$host\$request_uri;
    }
}
EOF

  echo -e "${INFO} ${CYAN}–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ nginx —Å SSL (./nginx.conf)...${RESET}"
  cat > nginx.conf <<EOF
server {
    listen 80;
    server_name $DOMAIN;

    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }

    location / {
        return 301 https://\$host\$request_uri;
    }
}

server {
    listen 443 ssl;
    server_name $DOMAIN;

    ssl_certificate /etc/letsencrypt/live/$DOMAIN/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/$DOMAIN/privkey.pem;

    location / {
        proxy_pass http://cobalt:9000;
        proxy_http_version 1.1;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
    }
}
EOF

  echo -e "${INFO} ${CYAN}–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è certbot webroot –∏ certs...${RESET}"
  mkdir -p ./certs ./webroot

  echo -e "${INFO} ${CYAN}–ó–∞–ø—É—Å–∫ Cobalt –∏ Watchtower —á–µ—Ä–µ–∑ Docker Compose...${RESET}"
  docker compose -f "$COMPOSE_FILE" up -d cobalt watchtower

  echo -e "${INFO} ${CYAN}–ó–∞–ø—É—Å–∫ nginx –±–µ–∑ SSL –¥–ª—è certbot...${RESET}"
  docker compose -f "$COMPOSE_FILE" up -d nginx

  echo -e "${INFO} ${CYAN}–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ nginx...${RESET}"
  for i in {1..10}; do
    if nc -z localhost 80; then
      echo -e "${OK} ${GREEN}nginx –∑–∞–ø—É—â–µ–Ω.${RESET}"
      break
    fi
    echo -e "${INFO} ${CYAN}–û–∂–∏–¥–∞–Ω–∏–µ... ($i/10)${RESET}"
    sleep 2
  done

  echo -e "${INFO} ${CYAN}–í—ã–ø—É—Å–∫ Let's Encrypt —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞...${RESET}"
  certbot certonly --webroot -w "$COBALT_DIR/webroot" -d "$DOMAIN" --agree-tos --email "admin@$DOMAIN" --non-interactive --preferred-challenges http

  echo -e "${INFO} ${CYAN}–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –≤ ./certs...${RESET}"
  cp /etc/letsencrypt/live/$DOMAIN/fullchain.pem "$COBALT_DIR/certs/fullchain.pem"
  cp /etc/letsencrypt/live/$DOMAIN/privkey.pem "$COBALT_DIR/certs/privkey.pem"

  echo -e "${INFO} ${CYAN}–û—Å—Ç–∞–Ω–æ–≤–∫–∞ nginx –¥–ª—è –∑–∞–º–µ–Ω—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...${RESET}"
  docker compose -f "$COMPOSE_FILE" stop nginx

  echo -e "${INFO} ${CYAN}–ó–∞–º–µ–Ω–∞ nginx-temp.conf –Ω–∞ –ø–æ–ª–Ω—ã–π nginx.conf...${RESET}"
  cp nginx.conf nginx-temp.conf

  echo -e "${INFO} ${CYAN}–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ nginx —Å –ø–æ–ª–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π...${RESET}"
  docker compose -f "$COMPOSE_FILE" up -d nginx

  echo -e "${OK} ${GREEN}–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!${RESET}"
  echo -e "${OK} ${GREEN}Cobalt –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É https://$DOMAIN${RESET}"
  [[ "$USE_COOKIES" == "y" ]] && echo -e "${WARN} ${YELLOW}–§–∞–π–ª cookies.json —Å–æ–∑–¥–∞–Ω. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –µ–≥–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.${RESET}"
}


manage_certs() {
  DOMAIN=$(grep 'server_name' "$COBALT_DIR/nginx.conf" | head -n1 | awk '{print $2}' | tr -d ';')

  echo -e "${CYAN}–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏${RESET}"
  echo -e "1. –û–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã"
  echo -e "2. –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –¥–ª—è –¥—Ä—É–≥–æ–≥–æ –¥–æ–º–µ–Ω–∞"
  echo -e "0. –í—ã—Ö–æ–¥"
  read -rp "[?] –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (0-2): " cert_choice
  case $cert_choice in
    1)
      echo -e "${INFO} ${CYAN}–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ certbot...${RESET}"
      certbot renew
      docker restart cobalt-nginx
      ;;
    2)
      echo -e "${ASK} ${YELLOW}–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –¥–æ–º–µ–Ω:${RESET}"
      read -rp ">>> " NEW_DOMAIN
      sed -i "s/server_name .*/server_name $NEW_DOMAIN;/" "$COBALT_DIR/nginx.conf"
      docker compose -f "$COMPOSE_FILE" down
      # –û–±–Ω–æ–≤–ª—è–µ–º webroot, –µ—Å–ª–∏ –Ω–∞–¥–æ ‚Äî –∑–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ –∂–µ, —á—Ç–æ –∏ —Ä–∞–Ω—å—à–µ
      certbot certonly --webroot -w "$COBALT_DIR/webroot" -d "$NEW_DOMAIN" --agree-tos --email admin@$NEW_DOMAIN --non-interactive --preferred-challenges http
      docker compose -f "$COMPOSE_FILE" up -d
      echo -e "${OK} ${GREEN}–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ –¥–æ–º–µ–Ω–∞: $NEW_DOMAIN${RESET}"
      ;;
    0)
      return ;;
    *)
      echo -e "${ERR} ${RED}–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.${RESET}"
      ;;
  esac
}

update_script() {
  echo -e "${INFO} ${CYAN}–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å–∫—Ä–∏–ø—Ç–∞...${RESET}"
  TMP_FILE=$(mktemp)
  curl -fsSL "$SCRIPT_URL" -o "$TMP_FILE"

  if cmp -s "$TMP_FILE" "$LOCAL_SCRIPT"; then
    echo -e "${OK} ${GREEN}–£ –≤–∞—Å —É–∂–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è —Å–∫—Ä–∏–ø—Ç–∞.${RESET}"
    rm "$TMP_FILE"
  else
    echo -e "${WARN} ${YELLOW}–ù–∞–π–¥–µ–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è. –û–±–Ω–æ–≤–ª—è—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏...${RESET}"
    cp "$TMP_FILE" "$LOCAL_SCRIPT"
    chmod +x "$LOCAL_SCRIPT"
    rm "$TMP_FILE"
    echo -e "${OK} ${GREEN}–°–∫—Ä–∏–ø—Ç –æ–±–Ω–æ–≤–ª—ë–Ω! –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –µ–≥–æ —Å–Ω–æ–≤–∞.${RESET}"
  fi
}

check_status() {
  echo -e "${INFO} ${CYAN}–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ Cobalt...${RESET}"
  if docker ps --format '{{.Names}}' | grep -qw cobalt; then
    echo -e "${OK} ${GREEN}–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä cobalt –∑–∞–ø—É—â–µ–Ω:${RESET}"
    docker ps --filter "name=cobalt" --format "table {{.ID}}\t{{.Image}}\t{{.Status}}\t{{.Ports}}"
    echo -e "\n${INFO} ${CYAN}–í—ã–≤–æ–¥ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 20 —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤ cobalt...${RESET}"
    docker logs --tail 20 cobalt
  else
    echo -e "${WARN} ${YELLOW}–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä cobalt –Ω–µ –∑–∞–ø—É—â–µ–Ω.${RESET}"
  fi
}

while true; do
  echo -e ""
  echo -e "${CYAN}===== DDCobalt Setup Menu =====${RESET}"
  echo -e "1. üîß –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Cobalt"
  echo -e "2. üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞"
  echo -e "3. üö™ –í—ã–π—Ç–∏"
  echo -e "4. üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å Cobalt"
  echo -e "5. üîí –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏"
  echo -e ""
  read -rp "${ASK} –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ [1-5]: " choice

  case $choice in
    1) install_cobalt ;;
    2) update_script ;;
    3) echo -e "${OK} ${GREEN}–í—ã—Ö–æ–¥...${RESET}"; exit 0 ;;
    4) check_status ;;
    5) manage_certs ;;
    *) echo -e "${ERR} ${RED}–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.${RESET}" ;;
  esac
done
